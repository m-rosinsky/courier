/*!
 * @file src/parser/parser.hpp
 *
 * @brief This file contains an implementation for the main parser of
 *          the program.
 * 
 *          It is responsible for parsing tokens from the token table
 *              generated by the lexer, and passing them to various
 *              sub-parsers.
 */

#ifndef _COURIER_SRC_PARSER_PARSER_HPP
#define _COURIER_SRC_PARSER_PARSER_HPP

#include <cstddef>              // uint*_t

#include "../lexer/lexer.hpp"
#include "../error/error.hpp"

/*!
 * @brief This class defines the parser context. It holds various
 *          metadata about the state of the program during execution,
 *          a functions to various sub-parsers.
 * 
 * @param _err The error of the parser.
 * @param _idx The current index within the token table.
 * @param _end_idx The index in the token table in which to stop parsing.
 */
class Parser
{
private:
    Error _err;
    uint32_t _idx;
    uint32_t _end_idx;
public:
    // Ctor.
    Parser()
        : _idx(0), _end_idx(0) {}

    const Error& get_error(void) const;
    void parse(const std::vector<sp_token_t>& __table,
               uint32_t __idx,
               uint32_t __end_idx) noexcept;
};

#endif // _COURIER_SRC_PARSER_PARSER_HPP

/***   end of file   ***/
