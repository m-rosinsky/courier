/*!
 * @file src/parser/parser.cpp
 *
 * @brief This file contains an implementation for the main parser of
 *          the program.
 * 
 *          It is responsible for parsing tokens from the token table
 *              generated by the lexer, and passing them to various
 *              sub-parsers.
 */

#include "parser.hpp"

/******************************************************************************/
/*                           Public functions                                 */
/******************************************************************************/

/*!
 * @brief This function is a getter for the Parser error status.
 */
const Error& Parser::get_error(void) const
{
    return _err;
}

/******************************************************************************/

/*!
 * @brief This function parses a table of tokens. This is the main
 *          entry point of the parser, after the lexer generates its table
 *          successfully.
 * 
 * @param[in] __table The token table.
 * @param[in] __idx The index to begin parsing.
 * @param[in] __end_idx The index within the table to stop parsing at.
 *                          If 0, will use the end of the table.
 * 
 * @return No return expected, but class member _err will be asserted on error.
 */
void Parser::parse(const std::vector<sp_token_t>& __table,
                   uint32_t __idx,
                   uint32_t __end_idx) noexcept
{
    // Check if the default value was given for __end_idx.
    _end_idx = (0 == __end_idx) ? __table.size() : __end_idx;

    _idx = __idx;

    // Iterate through the table from _idx to _end_idx.
    for (_idx = __idx; _idx < _end_idx; ++_idx)
    {
        // Check for error assertions.
        if (!_err.is_success())
        {
            break;
        }

        // Capture the current token.
        sp_token_t token = __table.at(_idx);

        // Any token reaching this point is considered an unexpected token.
        _err._status = ERR_UNEXP_TOKEN;
        _err._line_num = token->_line_num;
        _err._col_num = token->_col_num;
        _err._msg = token->_token;
    }
}

/***   end of file   ***/
